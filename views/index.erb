<table id="mainTable">
  <tbody id="tableBody"></tbody>
</table>

<script>

  class ScreenObject{
    constructor(){
      this.isBackground = false;
    }
    isMenu(){
      return false;
    }
    isAt(x,y){
      return (x>=this.x)&&(x<this.x+this.width)&&(y>=this.y)&&(y<this.y+this.height)
    }
  }

  class Window extends ScreenObject{
    constructor(){
      super();
      this.image = new Image(5,5,"pink");
    }

    setPosition(x,y){
      this.image.setPosition(x,y);
    }

    update(){
      //
    }

    render(screen){
      this.image.render(screen);
    }

    get x(){
      return this.image.x;
    }

    get y(){
      return this.image.y;
    }

    get width(){
      return this.image.width;
    }

    get height(){
      return this.image.height;
    }

    click(screen,x,y){
      console.log("Window");
    }
  }

  class Pixel{
    constructor(x,y,color){
      this.x = x; this.y = y;
      this.color = color;
    }

    renderAt(x,y,screen){
      screen.setPixel(x+this.x,y+this.y,this.color);
    }
  }

  class Animation extends ScreenObject{
    constructor(){
      super();
      this.frames = [];
      this.currentFrame = 0;
    }

    addFrame(anImage){
      if(this.frames.length==0){
        this.width = anImage.width;
        this.height = anImage.height;
      }
      this.frames.push(anImage);
    }

    setPosition(x,y){
      this.x = x; this.y = y;
      this.frames.forEach(aFrame => { aFrame.setPosition(x,y); });
    }

    render(screen){
      this.frames[this.currentFrame].render(screen);
    }

    update(){
      this.currentFrame++;
      if(this.currentFrame>=this.frames.length){
        this.currentFrame = 0;
      }
    }

    click(screen,x,y){
      console.log("Animation");
    }
  }

  class Image extends ScreenObject{
    constructor(width,height,color){
      super();
      this.width=width; this.height=height;
      this.pixels = [];this.color = color;
      for(let i=0;i<height;i++){
        this.pixels.push([]);
        for(let j=0;j<width;j++){
          this.pixels[i].push(new Pixel(j,i,color));
        }
      }
    }

    render(screen){
      this.pixels.forEach(row => {
        row.forEach(pixel => {
          pixel.renderAt(this.x,this.y,screen);
        });
      });
    }

    setPosition(x,y){ this.x = x; this.y = y; }

    update(){
      //
    }

    click(screen,x,y){
      console.log("Image");
    }

    setAsBackground(){
      this.isBackground = true;
    }

  }

  class Screen{
    constructor(width,height){
      this.mainTable = document.getElementById("mainTable");
      this.objects = [];
      let row = this.createRow(width); let tableContent = "";
      for(let i=0;i<height;i++){ tableContent += row; }
      document.getElementById("tableBody").innerHTML = tableContent;
      this.setClickEvents();
    }

    setClickEvents(){
      let scr = this;
      for(let i=0;i<this.mainTable.rows.length; i++){
        for(let j=0;j<this.mainTable.rows[i].cells.length;j++){
          this.mainTable.rows[i].cells[j].onclick = function(){
            let row = this.closest('tr');
            scr.clickAt(this.cellIndex, row.rowIndex);
          };
        }
      }
    }

    clickAt(x,y){
      if(this.isMenuOpened()){
        let menu = this.getMenu();
        if(menu.isAt(x,y)){
          menu.click(this,x,y);
        }
        this.closeMenu();
      }
      else{
        let objectFound = this.objectAt(x,y);
        if(objectFound.isBackground){
          this.openMenu(x,y);
        }else{
          objectFound.click(this,x,y);
        }
      }
    }

    openMenu(x,y){
      let menu = new Menu();
      let option1 = new MenuOption(8,2,"purple","Open");
      let option2 = new MenuOption(8,3,"white","Edit");
      let option3 = new MenuOption(8,4,"orange","Save");
      menu.addOption(option1);
      menu.addOption(option2);
      menu.addOption(option3);
      this.addObject(x,y,menu);
    }

    objectAt(x,y){
      let answer = null;
      for(let i=this.objects.length-1;i>=0;i--){
        if(this.objects[i].isAt(x,y)){
          answer = this.objects[i];
          break;
        }
      }
      return answer;
    }

    createRow(size){
      let row = "<tr>";
      for(let i=0;i<size;i++){ row += "<td></td>"; }
      row += "</tr>";
      return row;
    }

    render(){
      this.objects.forEach(anObject => anObject.render(this));
    }

    addObject(x,y,anObject){
      anObject.setPosition(x,y);
      this.objects.push(anObject);
    }

    setPixel(x,y,color){
      mainTable.rows[y].cells[x].style.backgroundColor = color;
    }

    update(){
      this.objects.forEach(anObject => anObject.update());
    }

    isMenuOpened(){
      let ans = false;
      for(let i=0;i<this.objects.length;i++){
        if(this.objects[i].isMenu()){
          ans = true; break;
        }
      }
      return ans;
    }

    getMenu(){
      let menu;
      for(let i=0;i<this.objects.length;i++){
        if(this.objects[i].isMenu()){
          menu = this.objects[i]; break;
        }
      }
      return menu;
    }

    closeMenu(){
      let menuIndex = this.objects.findIndex(menuCandidate => {
        return menuCandidate.isMenu();
      });
      this.objects.splice(menuIndex,1);
    }
  }

  class MenuOption extends ScreenObject{
    constructor(width,height,color,menuText){
      super();
      this.width=width;this.height=height;
      this.color = color;this.text = menuText;
      this.image = new Image(width,height,color);
    }

    render(screen){
      this.image.render(screen);
    }

    setPosition(x,y){
      this.image.setPosition(x,y);
    }

    get x(){
      return this.image.x;
    }

    get y(){
      return this.image.y;
    }

    click(screen){
      console.log("Menu option: "+this.text);
      if(this.text=="Open"){
        // ADD WINDOW TO SCREEN
        let wind = new Window();
        screen.addObject(5,5,wind);
      }
    }
  }

  class Menu extends ScreenObject{
    constructor(){
      super();
      this.options = [];
    }

    addOption(anOption){
      this.options.push(anOption);
    }

    setPosition(x,y){
      this.x = x; this.y = y;
      let currentY = y;
      for(let i=0;i<this.options.length;i++){
        this.options[i].setPosition(x,currentY);
        currentY += this.options[i].height;
      }
    }

    update(){
      //
    }

    render(screen){
      this.options.forEach(anOption => { anOption.render(screen); });
    }

    get width(){
      return this.options[0].width;
    }

    get height(){
      let sum = 0;
      this.options.forEach(anOption => {
        sum += anOption.height;
      });
      return sum;
    }

    click(screen,x,y){
      let option = this.optionAt(x,y);
      option.click(screen);
    }

    optionAt(x,y){
      let option = null;
      for(let i=0;i<this.options.length;i++){
        if(this.options[i].isAt(x,y)){
          option = this.options[i];
          break;
        }
      }
      return option;
    }

    isMenu(){
      return true;
    }
  }

  let mainScreen = new Screen(40,20);
  let backgroundImage = new Image(40,20,"grey");
  backgroundImage.setAsBackground();
  let redImage = new Image(6,3,"red");
  let greenImage = new Image(3,6,"green");

  let frame1 = new Image(4,4,"black");
  let frame2 = new Image(4,4,"orange");
  let anAnimation = new Animation();
  anAnimation.addFrame(frame1);
  anAnimation.addFrame(frame2);

  mainScreen.addObject(0,0,backgroundImage);
  mainScreen.addObject(1,1,redImage);
  mainScreen.addObject(20,10,greenImage);
  mainScreen.addObject(25,10,anAnimation);


  let frameCounter = 0;
  setInterval(() => {
    frameCounter++;
    mainScreen.update();
    mainScreen.render();
  }, 1000);

</script>
